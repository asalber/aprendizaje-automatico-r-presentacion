{
  "hash": "56ac4f361b8713a4c5b70f4cad2a049f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Aprendizaje Automático\"\nsubtitle: \"Aprendizaje Automático con R\"\nauthor: \"Alfredo Sánchez Alberca &nbsp; [{{< fa envelope >}}](mailto:asalber@ceu.es) [{{< fa brands twitter >}}](https://twitter.com/aprendeconalf) [{{< fa home >}}](https://aprendeconalf.es)\"\ninstitute: Universidad CEU San Pablo\nlogo: img/logos/sticker.png\n# title-slide-attributes:\n#     #data-background-color: black\n#     data-background-image: img/prompt-julia.png\n#     data-background-size: contain\n#format: clean-revealjs\nlang: es\nfig-align: center\nnavigation-mode: vertical\nslide-level: 3\n---\n\n\n\n## ¿Qué es el Aprendizaje Automático?\n\n> El aprendizaje automático es un campo de la inteligencia artificial que se centra en el desarrollo de algoritmos y modelos que permiten a las computadoras aprender de los datos y hacer predicciones o tomar decisiones sin ser programadas explícitamente para cada tarea.\n>\n\n---\n\n![Aprendizaje Automático](img/02-aprendizaje-automatico/aprendizaje-automatico.svg)\n\n---\n\n```{mermaid}\n%%| echo: false\ngraph TD\n    B[Aprendizaje Automático]\n    \n    B --> H[Aprendizaje Supervisado]\n    B --> I[Aprendizaje No Supervisado]\n    B --> J[Aprendizaje por Refuerzo]\n    \n    H --> K[Clasificación]\n    H --> L[Regresión]\n    I --> M[Clustering]\n    I --> N[Reducción de Dimensionalidad]\n    \n    K --> O[Redes Neuronales]\n    K --> P[Máquinas de Soporte Vectorial]\n    K --> Q[Árboles de Decisión]\n    K --> R[Naive Bayes]\n    K --> S[K-Vecinos Más Próximos<br/>KNN]\n    K --> T[Regresión Logística]\n    \n    L --> U[Regresión Lineal]\n    L --> V[Regresión Polinomial]\n    L --> W[Redes Neuronales para Regresión]\n    L --> X[KNN para Regresión]\n    \n    O --> Y[Redes Neuronales Profundas<br/>Deep Learning]\n    O --> Z[Perceptrón Simple]\n    O --> AA[Perceptrón Multicapa]\n    \n    Y --> BB[Redes Convolucionales<br/>CNN]\n    Y --> CC[Redes Recurrentes<br/>RNN/LSTM]\n    Y --> DD[Transformers]\n    Y --> EE[Redes Generativas<br/>GAN]\n    Y --> FF[Autoencoders]\n    \n    classDef aiBox fill:#e1f5fe,stroke:#0277bd,stroke-width:3px\n    classDef mlBox fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    classDef nnBox fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    classDef dlBox fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    \n    class A aiBox\n    class B,H,I,J mlBox\n    class O,Y,Z,AA nnBox\n    class BB,CC,DD,EE,FF dlBox\n```\n\n---\n\n```{mermaid}\n%%| echo: false\n%%| eval: true\n%%| fig-width: 12\nflowchart TB\n  au[Aprendizaje Automático]\n  sp[Supervisado]\n  au--Datos numéricos o categóricos-->sp\n  us[No supervisado]\n  au--Datos sin clasificar-->us\n  cl[Clasificación]\n  sp--Predice categoría-->cl\n  rs[Regresión]\n  sp--Predice número-->rs\n  ag[Agrupación]\n  us--Divide por similitudes-->ag\n  rd[Reducción de dimensiones]\n  us--Busca dependencias escondidas-->rd\n  as[Asociación]\n  us--Identifica secuencias-->as\n```\n\n## Elementos para el Aprendizaje Automático\n\n- **Datos**: Conjuntos de datos que contienen casos de ejemplos de los que se quiere aprender.\n- **Modelos**: Algoritmos y estructuras matemáticas que representan relaciones en los datos.\n- **Entrenamiento**: Proceso de ajustar los parámetros del modelo utilizando datos etiquetados.\n- **Evaluación**: Medición del rendimiento del modelo utilizando métricas.\n- **Predicción**: Uso del modelo entrenado para predecir resultados en nuevos datos.\n\n## ¿Que es Tidymodels? ![](hexes/tidymodels.png){.absolute top=-20 right=0 width=\"64\" height=\"74.24\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ broom        1.0.8     ✔ recipes      1.3.1\n✔ dials        1.4.0     ✔ rsample      1.3.0\n✔ dplyr        1.1.4     ✔ tibble       3.3.0\n✔ ggplot2      3.5.2     ✔ tidyr        1.3.1\n✔ infer        1.0.9     ✔ tune         1.3.0\n✔ modeldata    1.4.0     ✔ workflows    1.2.0\n✔ parsnip      1.3.2     ✔ workflowsets 1.1.1\n✔ purrr        1.1.0     ✔ yardstick    1.3.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n```\n\n\n:::\n:::\n\n\n##  {background-image=\"images/tm-org.png\" background-size=\"contain\"}\n\n## Flujo de aprendizaje\n\n```{mermaid}\n%%| echo: false\n%%| eval: true\n%%| fig-width: 12\nflowchart LR\n  ad[Todos los datos]\n  style ad fill:#fff,stroke:#666,color:#000\n  tr[Entrenamiento]\n  style tr fill:#FBE9BF,stroke:#666,color:#000\n  ts[Prueba]\n  style ts fill:#E5E7FD,stroke:#666,color:#000\n  ad --> tr\n  ad --> ts\n```\n\n## Flujo de aprendizaje\n\n```{mermaid}\n%%| echo: false\n%%| eval: true\n%%| fig-width: 12\nflowchart LR\n  ad[Todos los datos]\n  style ad fill:#fff,stroke:#666,color:#000\n  tr[Entrenamiento]\n  style tr fill:#FBE9BF,stroke:#666,color:#000\n  ts[Prueba]\n  style ts fill:#E5E7FD,stroke:#666,color:#000\n  ad --> tr\n  ad --> ts\n  dt[Arbol de Decisión]\n  style dt fill:#FDF4E3,stroke:#666,color:#000\n  tr --> dt\n```\n\n## Flujo de aprendizaje\n\n```{mermaid}\n%%| echo: false\n%%| eval: true\n%%| fig-width: 12\nflowchart LR\n  ad[Todos los datos]\n  style ad fill:#fff,stroke:#666,color:#000\n  tr[Entrenamiento]\n  style tr fill:#FBE9BF,stroke:#666,color:#000\n  ts[Prueba]\n  style ts fill:#E5E7FD,stroke:#666,color:#000\n  ad --> tr\n  ad --> ts\n  lg[Regresión logística]\n  style lg fill:#FDF4E3,stroke:#666,color:#000\n  tr --> lg\n  dt[Arbol de Decisión]\n  style dt fill:#FDF4E3,stroke:#666,color:#000\n  tr --> dt\n  rf[Bosque Aleatorio]\n  style rf fill:#FDF4E3,stroke:#666,color:#000\n  tr --> rf\n\n```\n\n## Flujo de aprendizaje\n\n```{mermaid}\n%%| echo: false\n%%| eval: true\n%%| fig-width: 12\nflowchart LR\n  ad[Todos los datos]\n  style ad fill:#fff,stroke:#666,color:#000\n  tr[Entrenamiento]\n  style tr fill:#FBE9BF,stroke:#666,color:#000\n  ts[Prueba]\n  style ts fill:#E5E7FD,stroke:#666,color:#000\n  ad --> tr\n  ad --> ts\n  rs[Remuestreo]\n  style rs fill:#FDF4E3,stroke:#666,color:#000\n  tr --> rs\n  lg[Regresión logística]\n  style lg fill:#FDF4E3,stroke:#666,color:#000\n  rs --> lg\n  dt[Arbol de Decisión]\n  style dt fill:#FDF4E3,stroke:#666,color:#000\n  rs --> dt\n  rf[Bosque Aleatorio]\n  style rf fill:#FDF4E3,stroke:#666,color:#000\n  rs --> rf\n```\n\n## Flujo de aprendizaje\n\n```{mermaid}\n%%| echo: false\n%%| eval: true\n%%| fig-width: 12\nflowchart LR\n  ad[Todos los datos]\n  style ad fill:#fff,stroke:#666,color:#000\n  tr[Entrenamiento]\n  style tr fill:#FBE9BF,stroke:#666,color:#000\n  ts[Prueba]\n  style ts fill:#E5E7FD,stroke:#666,color:#000\n  ad --> tr\n  ad --> ts\n  rs[Remuestreo]\n  style rs fill:#FDF4E3,stroke:#666,color:#000\n  tr --> rs\n  lg[Regresión logística]\n  style lg fill:#FDF4E3,stroke:#666,color:#000\n  rs --> lg\n  dt[Arbol de Decisión]\n  style dt fill:#FDF4E3,stroke:#666,color:#000\n  rs --> dt\n  rf[Bosque Aleatorio]\n  style rf fill:#FDF4E3,stroke:#666,color:#000\n  rs --> rf\n  sm[Seleccionar modelo]\n  style sm fill:#FDF4E3,stroke:#666,color:#000\n  lg --> sm\n  dt --> sm\n  rf --> sm\n```\n\n## Flujo de aprendizaje\n\n```{mermaid}\n%%| echo: false\n%%| eval: true\n%%| fig-width: 12\nflowchart LR\n  ad[Todos los datos]\n  style ad fill:#fff,stroke:#666,color:#000\n  tr[Entrenamiento]\n  style tr fill:#FBE9BF,stroke:#666,color:#000\n  ts[Prueba]\n  style ts fill:#E5E7FD,stroke:#666,color:#000\n  ad --> tr\n  ad --> ts\n  rs[Remuestreo]\n  style rs fill:#FDF4E3,stroke:#666,color:#000\n  tr --> rs\n  lg[Regresión logística]\n  style lg fill:#FDF4E3,stroke:#666,color:#000\n  rs --> lg\n  dt[Arbol de Decisión]\n  style dt fill:#FDF4E3,stroke:#666,color:#000\n  rs --> dt\n  rf[Bosque Aleatorio]\n  style rf fill:#FDF4E3,stroke:#666,color:#000\n  rs --> rf\n  sm[Seleccionar modelo]\n  style sm fill:#FDF4E3,stroke:#666,color:#000\n  lg --> sm\n  dt --> sm\n  rf --> sm\n  fm[Entrenar modelo selecionado]\n  style fm fill:#FBE9BF,stroke:#666,color:#000\n  sm --> fm\n  tr --> fm\n```\n\n## Flujo de aprendizaje\n\n```{mermaid}\n%%| echo: false\n%%| eval: true\n%%| fig-width: 12\nflowchart LR\n  ad[Todos los datos]\n  style ad fill:#fff,stroke:#666,color:#000\n  tr[Entrenamiento]\n  style tr fill:#FBE9BF,stroke:#666,color:#000\n  ts[Prueba]\n  style ts fill:#E5E7FD,stroke:#666,color:#000\n  ad --> tr\n  ad --> ts\n  rs[Remuestreo]\n  style rs fill:#FDF4E3,stroke:#666,color:#000\n  tr --> rs\n  lg[Regresión logística]\n  style lg fill:#FDF4E3,stroke:#666,color:#000\n  rs --> lg\n  dt[Arbol de Decisión]\n  style dt fill:#FDF4E3,stroke:#666,color:#000\n  rs --> dt\n  rf[Bosque Aleatorio]\n  style rf fill:#FDF4E3,stroke:#666,color:#000\n  rs --> rf\n  sm[Seleccionar modelo]\n  style sm fill:#FDF4E3,stroke:#666,color:#000\n  lg --> sm\n  dt --> sm\n  rf --> sm\n  fm[Entrenar modelo selecionado]\n  style fm fill:#FBE9BF,stroke:#666,color:#000\n  sm --> fm\n  tr --> fm\n  vm[Verificar la calidad]\n  style vm fill:#E5E7FD,stroke:#666,color:#000\n  fm --> vm\n  ts --> vm\n```\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}